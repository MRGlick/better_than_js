
int get_num_length(int n) {
    int len = 0;
    while (n > 0) {
        n /= 10;
        len += 1;
    }

    return len;
}

int nth_digit(int num, int n) {
    while (n > 0) {
        num /= 10;
        n -= 1;
    }
    return num % 10;
}

bool is_palindrome(int num) {
    int len = get_num_length(num);
    int start = 0;
    int end = len;
    while (end - 1 > start) {
        if (nth_digit(num, end - 1) != nth_digit(num, start)) {
            return false;
        }
        end -= 1;
        start += 1;
    }
    return true;
}


int max_palindrome = 1;
int maxp_i;
int maxp_j;
int i = 1000;
int j = 1000;

while (i < 10000) {

    j = 1000;
    while (j < 10000) {

        int prod = i * j;

        if (i * j > max_palindrome) {
            if (is_palindrome(prod)) {
                maxp_i = i;
                maxp_j = j;
                max_palindrome = prod;
            }
        }

        j += 1;
    }
    i += 1;
}

print "The maximum palidrome for products of 4 digit numbers is ", max_palindrome, ", which is the product of ", maxp_i, " and ", maxp_j;
