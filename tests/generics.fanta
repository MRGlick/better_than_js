

<A>
struct Node {
    A val;
    Node<A>[] children;
}

# becomes

#struct Node$int {
#    int val;
#    Node$int[] children;
#}

#struct Node$str {
#    str val;
#    Node$str[] children;
#}

# etc..

<T, U>
U foo(T a, U b) {
    a.x = 2;
    b.y = 3;
}


# At parse(pre-sema) time: Generics are their own type. Their kind is TYPE_generic and they have a name metadata.
# Generics have to be expanded before sema - so I could access members without the gurantee theyre there
# But then how would I list the Generic types?

<T>
T[] arr(T a) {
    return [a];
}

int[] arr = arr(5);


<T>
T[] wrap(T a) {
    return [a];
}

