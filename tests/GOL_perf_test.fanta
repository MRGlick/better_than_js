

bool[][] generate_board(int size) {
    bool[][] board = [size; size];

    for (int r = 0; r < size; r += 1; ) {
        for (int c = 0; c < size; c += 1; ) {
            board[r][c] = maybe;
        }
    }

    return board;
}

int get_cell(bool[][] board, int r, int c) {
    if (r < 0 || r >= board.length || c < 0 || c >= board[0].length) return false;

    return board[r][c];
}

int count_live_cells(bool[][] board, int r, int c) {
    return get_cell(board, r, c + 1)
     + get_cell(board, r + 1, c + 1)
     + get_cell(board, r + 1, c)
     + get_cell(board, r + 1, c - 1)
     + get_cell(board, r, c - 1)
     + get_cell(board, r - 1, c - 1)
     + get_cell(board, r - 1, c)
     + get_cell(board, r - 1, c + 1);
}

bool[][] step(bool[][] old_board) {
    bool[][] new_board = [old_board.length; old_board[0].length];

    for (int r = 0; r < old_board.length; r += 1; ) {
        for (int c = 0; c < old_board[r].length; c += 1; ) {
            int live_cells = count_live_cells(old_board, r, c);

            if (live_cells == 2) new_board[r][c] = old_board[r][c];
            else if (live_cells == 3) new_board[r][c] = true;
            else new_board[r][c] = false;
        } 
    }

    return new_board;
}



void print_board(bool[][] board) {

    char[] buf = [(board.length * 2 * board[0].length + board[0].length);];
    int buf_idx = 0;

    for (int r = 0; r < board.length; r += 1; ) {
        for (int c = 0; c < board[r].length; c += 1; ) {
            int live_cells = count_live_cells(board, r, c);

            if (board[r][c]) {
                buf[buf_idx] = '@';
                buf_idx += 1;
            }
            else if (live_cells > 3) {
                buf[buf_idx] = '-';
                buf_idx += 1;
            }
            else if (live_cells > 1) {
                buf[buf_idx] = '.';                
                buf_idx += 1;
            }
            else {
                buf[buf_idx] = ' ';                
                buf_idx += 1;
            }

            buf[buf_idx] = ' ';
            buf_idx += 1;
        } 
        buf[buf_idx] = 10;
        buf_idx += 1;
    }

    write buf;
}

int board_size = 50;

int steps = 30;

bool[][] board = generate_board(board_size);

for (int i = 0; i < steps; i += 1; ) {
    if (i > 0) clear_terminal_lines(board_size);
    print_board(board);
    board = step(board);
}

