
struct Complex {
    float real;
    float imag;
}

void c_write(Complex a)
    write a.real, " + ", a.imag, "i";

Complex c_new(float r, float i) return new Complex (
    real = r,
    imag = i
);

void c_add_inplace(Complex a, Complex b) {
    a.real = a.real + b.real;
    a.imag = a.imag + b.imag;
}

void c_mul_inplace(Complex a, Complex b) {
    float real = a.real * b.real - a.imag * b.imag;
    float imag = a.real * b.imag + b.real * a.imag;
    a.real = real;
    a.imag = imag;
}


float length_squared(Complex a) return a.real * a.real + a.imag * a.imag;


bool is_mandlebrot(Complex c) {

    float LENGTH_THRESHOLD = 2;
    int ITER_COUNT = 300; 

    # z(0) = 0
    # z(n) = z(n-1)^2 + c
    Complex result = c_new(0, 0);

    for (int i = 0; i < ITER_COUNT; i += 1; ) {
        c_mul_inplace(result, result);
        c_add_inplace(result, c);
        float l = length_squared(result);
        if (l > LENGTH_THRESHOLD * LENGTH_THRESHOLD) return false;
    }

    return true;
}

void test_MB(Complex a) {
    c_write(a);
    print ": ", is_mandlebrot(a);
}

char[][] render_mandlebrot(Complex top_left, Complex size, int width, int height) {
    
    # ts lang is ass
    char NEWLINE = 10;
    
    char[][] screen = [height; width + 1; ]; # width + 1 to include newline

    Complex coords;

    for (int r = 0; r < height; r += 1; ) {
        for (int c = 0; c < width; c += 1; ) {
            coords = c_new(size.real / width * c, -size.imag / height * r);
            c_add_inplace(coords, top_left);

            bool m = is_mandlebrot(coords);

            if (m) screen[r][c] = '@';
            else screen[r][c] = '.';
        }
        screen[r][width] = NEWLINE;
    }

    return screen;
}

int size = 200;

char[][] render = render_mandlebrot(
    c_new(-1.75, 1.5),
    c_new(2.5, 2.5),
    size,
    size
);

for (int i = 0; i < render.length; i += 1; ) {
    for (int j = 0; j < render[i].length; j += 1; ) {
        write render[i][j], " ";
    }
}
